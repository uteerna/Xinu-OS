Q1. What is Orphan and Zombie process?
A process whose parent process has either terminated or finished without waiting for the child process to complete its execution is known as an orphan process. The orphan process can be located and killed using the kill -9 pid command. Orphan processes are immediately adopted by init. The init process periodically invokes a wait() which causes the exit status of the orphan process to be collected and the process identifier is released and also the process would be removed from the process table.

A process which has an entry in the process table even after its execution is over is known as a Zombie process. It continues to be a zombie process till its entry is found in the process table. The parent process reads the entry of the finished child process using the wait() system call before exiting, this process is known as reaping. The zombie process can be terminated either when the parent calls wait() or when the parent itself terminates. The zombie process does not occupy any resource, but it remains in the process table. Too many zombie processes can fill up the process table as it is a finite resource.

Q2. What are the changes that occur when the child process calls the exec system call to execute a new program?
A process executes a program. When we call fork,a child process is created which is the an exact copy of the parent. When the child process calls the exec system call then the current child process would be replaced by the new exec function i.e. the current running process is replaced by the new process image. It loads the program into the current process space and runs it from the entry point.
